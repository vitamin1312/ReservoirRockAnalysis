import { useRef, useState, useEffect } from 'react';
import { Stage, Layer, Line, Image as KonvaImage } from 'react-konva';
import { KonvaEventObject } from 'konva/lib/Node';
import { UpdateMask } from '../../RestAPI/RestAPI';
import { useNavigate } from 'react-router-dom';

type Tool = 'pen' | 'eraser';


interface DrawingCanvasProps {
    objectId: number;
    backgroundImageSrc: string;
    editableImageSrc: string;
}

export default function DrawingCanvas({ objectId, backgroundImageSrc, editableImageSrc }: DrawingCanvasProps) {
    const stageRef = useRef<any>(null);
    const containerRef = useRef<HTMLDivElement>(null);
    const [containerSize, setContainerSize] = useState({ width: 1000, height: 700 });

    const [lines, setLines] = useState<{ points: number[]; color: string; tool: Tool; width: number }[]>([]);
    const [tool, setTool] = useState<Tool>('pen');
    const [color, setColor] = useState('#000000');
    const [penWidth, setPenWidth] = useState(2);
    const [eraserWidth, setEraserWidth] = useState(10);
    const isDrawing = useRef(false);

    const [backgroundImage, setBackgroundImage] = useState<HTMLImageElement | null>(null);
    const [editableImage, setEditableImage] = useState<HTMLImageElement | null>(null);

    const [stageScale, setStageScale] = useState(1);
    const [stagePosition, setStagePosition] = useState({ x: 0, y: 0 });

    const navigate = useNavigate();


    const isPanning = useRef(false);
    const lastPointerPosition = useRef<{ x: number; y: number } | null>(null);

    // FIX 2: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ isInsideImage
    function isInsideImage(x: number, y: number): boolean {
        if (!backgroundImage) return false;
        return (
            x >= 0 &&
            y >= 0 &&
            x <= backgroundImage.width && // –ò–∑–º–µ–Ω–µ–Ω–æ —Å backgroundImage.width * scale
            y <= backgroundImage.height    // –ò–∑–º–µ–Ω–µ–Ω–æ —Å backgroundImage.height * scale
        );
    }


    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    useEffect(() => {
        const bgImg = new window.Image();
        bgImg.src = backgroundImageSrc;
        bgImg.onload = () => setBackgroundImage(bgImg);

        const editImg = new window.Image();
        editImg.src = editableImageSrc;
        editImg.onload = () => setEditableImage(editImg);
    }, [backgroundImageSrc, editableImageSrc]);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏ stage
    useEffect(() => {
        function updateSize() {
            if (containerRef.current) {
                setContainerSize({
                    width: containerRef.current.clientWidth,
                    height: containerRef.current.clientHeight,
                });
            }
        }
        updateSize();

        window.addEventListener('resize', updateSize);
        return () => window.removeEventListener('resize', updateSize);
    }, []);

    const handleWheel = (e: KonvaEventObject<WheelEvent>) => {
        e.evt.preventDefault();

        const scaleBy = 1.05;
        const stage = e.target.getStage();
        if (!stage) return;

        const oldScale = stageScale;
        const pointer = stage.getPointerPosition();
        if (!pointer) return;

        const mousePointTo = {
            x: (pointer.x - stagePosition.x) / oldScale,
            y: (pointer.y - stagePosition.y) / oldScale,
        };

        const direction = e.evt.deltaY > 0 ? -1 : 1;
        const newScale = direction > 0 ? oldScale * scaleBy : oldScale / scaleBy;
        setStageScale(newScale);

        const newPos = {
            x: pointer.x - mousePointTo.x * newScale,
            y: pointer.y - mousePointTo.y * newScale,
        };
        setStagePosition(newPos);
    };

    // –ü–æ–¥–≥–æ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å
    const getImageScale = () => {
        if (!backgroundImage) return 1;
        const scaleX = containerSize.width / backgroundImage.width;
        const scaleY = containerSize.height / backgroundImage.height;
        return Math.min(scaleX, scaleY);
    };

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ü–ö–ú
    const handleContextMenu = (e: KonvaEventObject<MouseEvent>) => {
        e.evt.preventDefault();
    };

    // –ù–∞–∂–∞–ª–∏ –º—ã—à—å (–µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è)
    const handleMyMouseDown = (e: KonvaEventObject<MouseEvent>) => {
        const stage = e.target.getStage();
        if (!stage) return;

        const pos = stage.getPointerPosition();
        if (!pos) return;

        if (e.evt.button === 2) {
            // –ü–ö–ú ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
            isPanning.current = true;
            lastPointerPosition.current = pos;
            return;
        }

        if (e.evt.button !== 0) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –õ–ö–ú

        isDrawing.current = true;

        // FIX 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ realX, realY.
        // –¢–µ–ø–µ—Ä—å realX, realY –±—É–¥—É—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const realX = (pos.x - stagePosition.x) / stageScale / getImageScale();
        const realY = (pos.y - stagePosition.y) / stageScale / getImageScale();

        if (!isInsideImage(realX, realY)) return;

        setLines([
            ...lines,
            {
                points: [realX, realY],
                color,
                tool,
                width: tool === 'pen' ? penWidth : eraserWidth,
            },
        ]);
    };


    // –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ (–¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è)
    const handleMouseMyMove = (e: KonvaEventObject<MouseEvent>) => {
        if (!isPanning.current) return;
        const stage = e.target.getStage();
        if (!stage) return;

        const pointer = stage.getPointerPosition();
        if (!pointer || !lastPointerPosition.current) return;

        // –°–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏
        const dx = pointer.x - lastPointerPosition.current.x;
        const dy = pointer.y - lastPointerPosition.current.y;

        setStagePosition((pos) => ({
            x: pos.x + dx,
            y: pos.y + dy,
        }));

        lastPointerPosition.current = pointer;
    };

    // –û—Ç–ø—É—Å—Ç–∏–ª–∏ –º—ã—à—å (–¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è)
    const handleMyMouseUp = (e: KonvaEventObject<MouseEvent>) => {
        if (e.evt.button === 2) {
            isPanning.current = false;
            lastPointerPosition.current = null;
        }
    };

    // –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ (—Ä–∏—Å–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
    const handleMouseMove = (e: KonvaEventObject<MouseEvent>) => {
        if (!isDrawing.current || e.evt.buttons !== 1) return; // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∏—Å—É–µ–º –∏ –õ–ö–ú –Ω–∞–∂–∞—Ç–∞

        const stage = e.target.getStage();
        if (!stage) return; // –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é

        const pos = stage.getPointerPosition();
        if (!pos) return;

        // FIX 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ realX, realY
        const realX = (pos.x - stagePosition.x) / stageScale / getImageScale();
        const realY = (pos.y - stagePosition.y) / stageScale / getImageScale();

        // üîß –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å
        if (!isInsideImage(realX, realY)) return;

        const lastLine = lines[lines.length - 1]; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–∏–Ω–∏—é
        if (!lastLine) return;

        const newLines = lines.slice(0, -1); // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏
        newLines.push({
            ...lastLine,
            points: [...lastLine.points, realX, realY], // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
        });
        setLines(newLines);
    };

    // –û—Ç–ø—É—Å—Ç–∏–ª–∏ –º—ã—à—å (–¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è)
    const handleMouseUp = (e: KonvaEventObject<MouseEvent>) => {
        if (e.evt.button === 0) { // –ï—Å–ª–∏ –æ—Ç–ø—É—â–µ–Ω–∞ –õ–ö–ú
            isDrawing.current = false;
        }
    };

    // FIX 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const handleSave = (id: number) => {
        if (!editableImage) return;

        const realWidth = editableImage.width;
        const realHeight = editableImage.height;

        const canvas = document.createElement('canvas'); // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π HTML-—Ö–æ–ª—Å—Ç
        canvas.width = realWidth; // –ó–∞–¥–∞—ë–º –µ–º—É —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        canvas.height = realHeight;
        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';

        // –†–∏—Å—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        ctx.drawImage(editableImage, 0, 0, realWidth, realHeight);

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏ –∏ —Ä–∏—Å—É–µ–º –∏—Ö
        lines.forEach(line => {
            ctx.globalCompositeOperation = line.tool === 'eraser' ? 'destination-out' : 'source-over';
            ctx.strokeStyle = line.color;
            // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ –±–µ—Ä—ë—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ `line.width`,
            // —Ç–∞–∫ –∫–∞–∫ —Ç–æ—á–∫–∏ `points` —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,
            // –∏ `line.width` –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–∏–∫—Å–µ–ª—è–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
            ctx.lineWidth = line.width; // –£–±—Ä–∞–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ `* scaleX`

            ctx.lineJoin = 'round';
            ctx.lineCap = 'round';

            ctx.beginPath();
            const pts = line.points;
            if (pts.length >= 2) {
                // –¢–æ—á–∫–∏ `pts` —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç 0 –¥–æ realWidth/realHeight)
                // –ë–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ `realX`/`realY`, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
                ctx.moveTo(pts[0], pts[1]); // –£–±—Ä–∞–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ `* scaleX`
                for (let i = 2; i < pts.length; i += 2) {
                    ctx.lineTo(pts[i], pts[i + 1]); // –£–±—Ä–∞–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ `* scaleY`
                }
            }
            ctx.stroke();
        });

        const dataURL = canvas.toDataURL('image/png');
        UpdateMask(dataURL, id);
    };


    return (
        <div className="flex flex-col h-full" ref={containerRef} style={{ position: 'relative' }}>
            {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
            <div className="flex items-center h-16 px-8 border-b border-gray-300 bg-gray-50 justify-between">
                {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */}
                <div className="flex items-center gap-4">
                    <button
                        onClick={() => setTool('pen')}
                        className={`px-3 py-1 rounded ${
                            tool === 'pen' ? 'font-bold bg-blue-200 text-blue-900' : 'font-normal text-gray-700 hover:bg-gray-200'
                        }`}
                    >
                        –ö–∞—Ä–∞–Ω–¥–∞—à
                    </button>
                    <button
                        onClick={() => setTool('eraser')}
                        className={`px-3 py-1 rounded ${
                            tool === 'eraser' ? 'font-bold bg-blue-200 text-blue-900' : 'font-normal text-gray-700 hover:bg-gray-200'
                        }`}
                    >
                        –õ–∞—Å—Ç–∏–∫
                    </button>

                    {tool === 'pen' && (
                        <>
                            <input
                                type="color"
                                value={color}
                                onChange={(e) => setColor(e.target.value)}
                                className="w-10 h-8 p-0 border-none cursor-pointer"
                                title="–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞"
                            />
                            <label className="flex items-center gap-2">
                                <span className="text-sm text-gray-700">–¢–æ–ª—â–∏–Ω–∞:</span>
                                <input
                                    type="range"
                                    min={1}
                                    max={20}
                                    value={penWidth}
                                    onChange={(e) => setPenWidth(parseInt(e.target.value))}
                                    className="w-24 cursor-pointer"
                                />
                                <span className="w-6 text-right text-sm">{penWidth}</span>
                            </label>
                        </>
                    )}

                    {tool === 'eraser' && (
                        <label className="flex items-center gap-2">
                            <span className="text-sm text-gray-700">–¢–æ–ª—â–∏–Ω–∞:</span>
                            <input
                                type="range"
                                min={10}
                                max={100}
                                value={eraserWidth}
                                onChange={(e) => setEraserWidth(parseInt(e.target.value))}
                                className="w-24 cursor-pointer"
                            />
                            <span className="w-6 text-right text-sm">{eraserWidth}</span>
                        </label>
                    )}
                </div>

                {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å */}
                <button
                    onClick={() => {
                        handleSave(objectId);
                        navigate("/");
                    }}
                    className="px-3 py-2 rounded bg-green-500 text-white hover:bg-green-600 mr-4 my-2 self-center"
                >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
            </div>

            {/* –•–æ–ª—Å—Ç */}
             <div className="flex-grow border border-gray-300">
              <Stage
                  ref={stageRef}
                  width={containerSize.width}
                  height={containerSize.height}
                  scaleX={stageScale}
                  scaleY={stageScale}
                  x={stagePosition.x}
                  y={stagePosition.y}
                  onWheel={handleWheel}
                  onContextMenu={handleContextMenu}
                  onMouseDown={handleMyMouseDown}
                  onMouseMove={(e) => {
                      handleMouseMove(e);
                      handleMouseMyMove(e);
                  }}
                  onMouseUp={(e) => {
                      handleMouseUp(e);
                      handleMyMouseUp(e);
                  }}
                  style={{ background: '#fff', touchAction: 'none' }}
              >
                  {/* –ü–µ—Ä–≤—ã–π —Å–ª–æ–π: —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–Ω–æ –Ω–µ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è) */}
                  <Layer>
                      {backgroundImage && (
                          <KonvaImage
                              image={backgroundImage}
                              width={backgroundImage.width}
                              height={backgroundImage.height}
                              scaleX={getImageScale()}
                              scaleY={getImageScale()}
                          />
                      )}
                  </Layer>

                  {/* –í—Ç–æ—Ä–æ–π —Å–ª–æ–π: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ò –í–°–ï –õ–ò–ù–ò–ò */}
                  <Layer>
                      {editableImage && (
                          <KonvaImage
                              image={editableImage}
                              width={editableImage.width}
                              height={editableImage.height}
                              scaleX={getImageScale()}
                              scaleY={getImageScale()}
                          />
                      )}

                      {/* –í—Å–µ –ª–∏–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –ª–∞—Å—Ç–∏–∫, —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Ç–æ–º –∂–µ —Å–ª–æ–µ, —á—Ç–æ –∏ editableImage.
                          –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ–≤–µ—Ä—Ö –Ω–µ–≥–æ - –ª–∏–Ω–∏–∏.
                          –õ–∞—Å—Ç–∏–∫ —Å destination-out —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç "–≤—ã—Ä–µ–∑–∞—Ç—å" –∏–∑editableImage.
                      */}
                      {lines.map((line, i) => (
                          <Line
                              key={i}
                              points={line.points.map((p, idx) =>
                                  idx % 2 === 0 ? p * getImageScale() : p * getImageScale()
                              )}
                              stroke={line.color}
                              strokeWidth={line.width * getImageScale()}
                              tension={0.5}
                              lineCap="round"
                              lineJoin="round"
                              globalCompositeOperation={line.tool === 'eraser' ? 'destination-out' : 'source-over'}
                          />
                      ))}
                  </Layer>
              </Stage>
          </div>
        </div>
    );
}